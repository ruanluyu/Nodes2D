package main;



import java.util.ArrayList;
import java.util.List;

interface NData {
	int getLength();

	void set();

	Object get();
}

class NNumber extends NObject{
	protected static final int id = 0;
	private int thisId = 0;
	NNumber(){
		thisId = id;
		id++;
	}
}

class NBinary extends NNumber implements NData {
	private static final int DEFAULT_LENGTH = 16;
	private static final String CLASSNAME = "NBinary";
	private int length = DEFAULT_LENGTH;
	List<Boolean> list = new ArrayList<Boolean>();
	
	NBinary(){
		this(DEFAULT_LENGTH);
	}
	
	NBinary(int length){
		super();
		this.length = length;
		for(int i = 0 ;i<length;i++){
			list.add(false);
		}
	}
	
	
	static void invert(NData data) throws NodeException {
		int length = data.getLength();
		boolean cur[] = new boolean[length];
		for (int i = 0; i < length; i++) {
			cur[i] = (Boolean) data.get(i);
		}
		for (int i = 0; i < length; i++) {
			data.set(i, cur[length - i - 1]);
		}
	}

	public void set(int id, boolean bool) throws NodeException {
		try {
			if (id >= length)
				throw new NodeException(2, CLASSNAME);
		} catch (NodeException e) {
			e.println();
			throw new NodeException(2, CLASSNAME);
		}
		list.set(id, bool);
	}

	public boolean get(int id) throws NodeException {
		try {
			if (id >= length)
				throw new NodeException(2, CLASSNAME);
		} catch (NodeException e) {
			e.println();
			throw new NodeException(2, CLASSNAME);
		}
		return list.get(id);
	}

	protected static NData nPlus(NData data1, NData data2) throws NodeException {
		int max = data1.getLength() > data2.getLength() ? data1.getLength() : data2.getLength();
		boolean out[] = new boolean[max];
		for (int i = 0; i < data1.getLength(); i++) {
			out[i] = data1.get(i);
		}
		for (int i = 0; i < data2.getLength(); i++) {
			boolean cur = data2.get(i);
			int pointer = i;
			if (out[i] = false) {
				out[i] = data2.get(i);
				continue;
			} else {
				if (data2.get(i) == false) {
					continue;
				} else {
					while (out[pointer]) {
						if (out[pointer]) {
							out[pointer] = false;
						} else {
							out[pointer] = true;
							continue;
						}
						pointer++;
						if (pointer >= max)
							throw new NodeException(4, CLASSNAME);
					}
				}
			}
		}
		NData outdata = new NData(max);
		for (int i = 0; i < max; i++) {
			outdata.set(i, out[i]);
		}
		return outdata;
	}
}

class NFloat extends NNumber implements NData {
	private static final int DEFAULT_LENGTH = 16;
	private static final String CLASSNAME = "NFloat";
	private int point = 0;
	private float data = 0;

	public void set() {

	}

	public Object get() {
		return data;
	}

	public int getLength() {

		return DEFAULT_LENGTH;
	}
}

class NInt extends NNumber implements NData {
	private static final int DEFAULT_LENGTH = 16;
	private static final String CLASSNAME = "NInt";
}
